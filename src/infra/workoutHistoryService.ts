/**
 * Hist√≥rico de Treinos - Servi√ßo de Armazenamento
 * 
 * Este servi√ßo gerencia o armazenamento e recupera√ß√£o de treinos conclu√≠dos.
 * Atualmente usa armazenamento local (SecureStore) mas est√° preparado para
 * integra√ß√£o futura com backend.
 * 
 * Arquitetura: Clean Architecture - Camada de Infra
 * Dados: Todos os treinos s√£o isolados por userId para seguran√ßa
 */

import * as secure from './secureStore';

/**
 * Registro completo de um treino executado
 * Este √© o formato que ser√° salvo e exibido na tela de Perfil
 */
export interface WorkoutRecord {
  id: string;
  userId: string; // ID do usu√°rio que realizou o treino
  date: string; // ISO string da data/hora
  name: string; // Nome do treino (ex: "UPPER LOWER")
  dayName?: string; // Nome do dia (ex: "Upper 1", "Push 1")
  
  // Estat√≠sticas gerais
  duration: number; // Dura√ß√£o total em segundos
  totalVolume: number; // Volume total em kg
  completedSets: number; // S√©ries completadas
  totalSets: number; // Total de s√©ries
  
  // Dados dos exerc√≠cios
  muscleGroups: string[]; // Grupos musculares trabalhados
  exercises: ExerciseRecord[]; // Lista detalhada de exerc√≠cios
  
  // Observa√ß√µes do usu√°rio (opcional - s√≥ salvo se preenchido)
  notes?: string;
  
  // Metadata
  createdAt: string; // ISO string da cria√ß√£o do registro
}

/**
 * Dados de um exerc√≠cio executado dentro do treino
 */
export interface ExerciseRecord {
  id: string;
  name: string;
  bodyPart: string; // Parte do corpo trabalhada
  target: string; // M√∫sculo alvo
  equipment: string; // Equipamento usado
  completedSets: number; // S√©ries completadas
  totalSets: number; // Total de s√©ries programadas
  volume: number; // Volume total deste exerc√≠cio (kg)
  sets: SetRecord[]; // Dados detalhados de cada s√©rie
}

/**
 * Dados de uma s√©rie individual executada
 */
export interface SetRecord {
  setId: string;
  setNumber: number; // 1, 2, 3, etc
  weight: number; // Carga em kg
  reps: number; // Repeti√ß√µes realizadas
  completed: boolean; // Se a s√©rie foi completada
}

/**
 * Servi√ßo de Hist√≥rico de Treinos
 * 
 * Gerenciamento completo de treinos conclu√≠dos:
 * - Salvamento de treinos completos com todos os dados
 * - Recupera√ß√£o por usu√°rio (isolamento)
 * - Estat√≠sticas e filtros
 * - Preparado para integra√ß√£o com backend futuro
 */
export class WorkoutHistoryService {
  private static readonly WORKOUTS_KEY = 'workout_history';

  /**
   * Salva um treino conclu√≠do no hist√≥rico
   * @param workout - Registro completo do treino executado
   */
  static async saveWorkout(workout: WorkoutRecord): Promise<void> {
    try {
      console.log('üíæ Salvando treino:', workout.id);
      
      // Buscar treinos existentes
      const existingWorkouts = await this.getWorkouts();
      
      // Adicionar novo treino
      const updatedWorkouts = [...existingWorkouts, workout];
      
      // Ordenar por data (mais recente primeiro)
      updatedWorkouts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
      
      // Salvar usando SecureStore (compat√≠vel React Native)
      await secure.setItem(
        this.WORKOUTS_KEY,
        JSON.stringify(updatedWorkouts)
      );
      
      console.log('‚úÖ Treino salvo com sucesso:', workout.id);
    } catch (error) {
      console.error('‚ùå Erro ao salvar treino:', error);
      throw new Error('Falha ao salvar treino');
    }
  }

  /**
   * Busca todos os treinos salvos
   * @param userId - ID do usu√°rio para filtrar (opcional, mas recomendado)
   * @returns Array de treinos ordenados por data (mais recente primeiro)
   */
  static async getWorkouts(userId?: string): Promise<WorkoutRecord[]> {
    try {
      const data = await secure.getItem(this.WORKOUTS_KEY);
      if (!data) {
        console.log('üì≠ Nenhum treino encontrado no hist√≥rico');
        return [];
      }

      const allWorkouts = JSON.parse(data) as WorkoutRecord[];
      
      // Filtrar por usu√°rio se fornecido
      let workouts = userId 
        ? allWorkouts.filter((workout: WorkoutRecord) => workout.userId === userId)
        : allWorkouts;
      
      // Ordenar por data (mais recente primeiro)
      workouts = workouts.sort((a, b) => 
        new Date(b.date).getTime() - new Date(a.date).getTime()
      );
      
      console.log(`üìã Carregados ${workouts.length} treinos${userId ? ` para usu√°rio ${userId}` : ''}`);
      return workouts;
    } catch (error) {
      console.error('‚ùå Erro ao buscar treinos:', error);
      return [];
    }
  }

  /**
   * Busca treinos por per√≠odo
   */
  static async getWorkoutsByPeriod(startDate: Date, endDate: Date): Promise<WorkoutRecord[]> {
    try {
      const allWorkouts = await this.getWorkouts();
      return allWorkouts.filter(workout => {
        const workoutDate = new Date(workout.date);
        return workoutDate >= startDate && workoutDate <= endDate;
      });
    } catch (error) {
      console.error('Erro ao buscar treinos por per√≠odo:', error);
      return [];
    }
  }

  /**
   * Busca treinos por grupo muscular
   */
  static async getWorkoutsByMuscleGroup(muscleGroup: string): Promise<WorkoutRecord[]> {
    try {
      const allWorkouts = await this.getWorkouts();
      return allWorkouts.filter(workout => 
        workout.muscleGroups.includes(muscleGroup)
      );
    } catch (error) {
      console.error('Erro ao buscar treinos por grupo muscular:', error);
      return [];
    }
  }

  /**
   * Remove um treino do hist√≥rico
   * @param workoutId - ID do treino a ser removido
   */
  static async deleteWorkout(workoutId: string): Promise<void> {
    try {
      const allWorkouts = await this.getWorkouts();
      const filteredWorkouts = allWorkouts.filter(workout => workout.id !== workoutId);
      
      await secure.setItem(
        this.WORKOUTS_KEY,
        JSON.stringify(filteredWorkouts)
      );
      
      console.log('‚úÖ Treino removido:', workoutId);
    } catch (error) {
      console.error('‚ùå Erro ao remover treino:', error);
      throw new Error('Falha ao remover treino');
    }
  }

  /**
   * Calcula estat√≠sticas gerais
   */
  static async getWorkoutStats(): Promise<{
    totalWorkouts: number;
    totalVolume: number;
    totalDuration: number;
    averageWorkoutDuration: number;
    favoriteMuscleGroups: { [key: string]: number };
    recentWorkouts: WorkoutRecord[];
  }> {
    try {
      const allWorkouts = await this.getWorkouts();
      
      const totalWorkouts = allWorkouts.length;
      const totalVolume = allWorkouts.reduce((sum, workout) => sum + workout.totalVolume, 0);
      const totalDuration = allWorkouts.reduce((sum, workout) => sum + workout.duration, 0);
      const averageWorkoutDuration = totalWorkouts > 0 ? totalDuration / totalWorkouts : 0;
      
      // Contar grupos musculares mais trabalhados
      const muscleGroupCount: { [key: string]: number } = {};
      allWorkouts.forEach(workout => {
        workout.muscleGroups.forEach(muscle => {
          muscleGroupCount[muscle] = (muscleGroupCount[muscle] || 0) + 1;
        });
      });
      
      // √öltimos 7 treinos
      const recentWorkouts = allWorkouts.slice(0, 7);
      
      return {
        totalWorkouts,
        totalVolume,
        totalDuration,
        averageWorkoutDuration,
        favoriteMuscleGroups: muscleGroupCount,
        recentWorkouts
      };
    } catch (error) {
      console.error('Erro ao calcular estat√≠sticas:', error);
      return {
        totalWorkouts: 0,
        totalVolume: 0,
        totalDuration: 0,
        averageWorkoutDuration: 0,
        favoriteMuscleGroups: {},
        recentWorkouts: []
      };
    }
  }

  /**
   * Limpa todo o hist√≥rico de treinos
   */
  static async clearHistory(): Promise<void> {
    try {
      await secure.deleteItem(this.WORKOUTS_KEY);
      console.log('‚úÖ Hist√≥rico de treinos limpo');
    } catch (error) {
      console.error('‚ùå Erro ao limpar hist√≥rico:', error);
      throw new Error('Falha ao limpar hist√≥rico');
    }
  }

  /**
   * Exporta dados para backup
   * @returns Array com todos os treinos salvos
   */
  static async exportData(): Promise<WorkoutRecord[]> {
    try {
      return await this.getWorkouts();
    } catch (error) {
      console.error('‚ùå Erro ao exportar dados:', error);
      throw new Error('Falha ao exportar dados');
    }
  }

  /**
   * Importa dados de backup
   * @param workouts - Array de treinos para importar
   */
  static async importData(workouts: WorkoutRecord[]): Promise<void> {
    try {
      await secure.setItem(
        this.WORKOUTS_KEY,
        JSON.stringify(workouts)
      );
      console.log('‚úÖ Dados importados com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao importar dados:', error);
      throw new Error('Falha ao importar dados');
    }
  }
}
